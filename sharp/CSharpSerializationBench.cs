// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: c_sharp_serialization_bench.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Codecs.Proto {

  /// <summary>Holder for reflection information generated from c_sharp_serialization_bench.proto</summary>
  public static partial class CSharpSerializationBenchReflection {

    #region Descriptor
    /// <summary>File descriptor for c_sharp_serialization_bench.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CSharpSerializationBenchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFjX3NoYXJwX3NlcmlhbGl6YXRpb25fYmVuY2gucHJvdG8SDGNvZGVjcy5w",
            "cm90byJ1CglOb2RlTWV0YVASNwoIbWV0YUluZm8YASADKAsyJS5jb2RlY3Mu",
            "cHJvdG8uTm9kZU1ldGFQLk1ldGFJbmZvRW50cnkaLwoNTWV0YUluZm9FbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlwKCU5vZGVCYXNl",
            "UBIOCgZoaWRkZW4YASACKAgSCgoCaWQYAiACKAkSDAoEbmFtZRgDIAIoCRIl",
            "CgRtZXRhGAQgASgLMhcuY29kZWNzLnByb3RvLk5vZGVNZXRhUCJaCgpOb2Rl",
            "R3JvdXBQEiUKBGJhc2UYASACKAsyFy5jb2RlY3MucHJvdG8uTm9kZUJhc2VQ",
            "EiUKCGNoaWxkcmVuGAIgAygLMhMuY29kZWNzLnByb3RvLk5vZGVQIl0KBU5v",
            "ZGVQEiMKBG52YXIYASABKAsyEy5jb2RlY3MucHJvdG8uTlZhclBIABInCgZu",
            "Z3JvdXAYAiABKAsyFS5jb2RlY3MucHJvdG8uTkdyb3VwUEgAQgYKBG5vZGUi",
            "FgoFTlZhclASDQoFdmFsdWUYASACKAEiMgoHTkdyb3VwUBInCgVncm91cBgB",
            "IAIoCzIYLmNvZGVjcy5wcm90by5Ob2RlR3JvdXBQ"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Codecs.Proto.NodeMetaP), global::Codecs.Proto.NodeMetaP.Parser, new[]{ "MetaInfo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Codecs.Proto.NodeBaseP), global::Codecs.Proto.NodeBaseP.Parser, new[]{ "Hidden", "Id", "Name", "Meta" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Codecs.Proto.NodeGroupP), global::Codecs.Proto.NodeGroupP.Parser, new[]{ "Base", "Children" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Codecs.Proto.NodeP), global::Codecs.Proto.NodeP.Parser, new[]{ "Nvar", "Ngroup" }, new[]{ "Node" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Codecs.Proto.NVarP), global::Codecs.Proto.NVarP.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Codecs.Proto.NGroupP), global::Codecs.Proto.NGroupP.Parser, new[]{ "Group" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NodeMetaP : pb::IMessage<NodeMetaP> {
    private static readonly pb::MessageParser<NodeMetaP> _parser = new pb::MessageParser<NodeMetaP>(() => new NodeMetaP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeMetaP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Codecs.Proto.CSharpSerializationBenchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeMetaP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeMetaP(NodeMetaP other) : this() {
      metaInfo_ = other.metaInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeMetaP Clone() {
      return new NodeMetaP(this);
    }

    /// <summary>Field number for the "metaInfo" field.</summary>
    public const int MetaInfoFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_metaInfo_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> metaInfo_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MetaInfo {
      get { return metaInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeMetaP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeMetaP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MetaInfo.Equals(other.MetaInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MetaInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      metaInfo_.WriteTo(output, _map_metaInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += metaInfo_.CalculateSize(_map_metaInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeMetaP other) {
      if (other == null) {
        return;
      }
      metaInfo_.Add(other.metaInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            metaInfo_.AddEntriesFrom(input, _map_metaInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeBaseP : pb::IMessage<NodeBaseP> {
    private static readonly pb::MessageParser<NodeBaseP> _parser = new pb::MessageParser<NodeBaseP>(() => new NodeBaseP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeBaseP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Codecs.Proto.CSharpSerializationBenchReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeBaseP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeBaseP(NodeBaseP other) : this() {
      _hasBits0 = other._hasBits0;
      hidden_ = other.hidden_;
      id_ = other.id_;
      name_ = other.name_;
      meta_ = other.meta_ != null ? other.meta_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeBaseP Clone() {
      return new NodeBaseP(this);
    }

    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 1;
    private readonly static bool HiddenDefaultValue = false;

    private bool hidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hidden {
      get { if ((_hasBits0 & 1) != 0) { return hidden_; } else { return HiddenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hidden_ = value;
      }
    }
    /// <summary>Gets whether the "hidden" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHidden {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hidden" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHidden() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "meta" field.</summary>
    public const int MetaFieldNumber = 4;
    private global::Codecs.Proto.NodeMetaP meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Codecs.Proto.NodeMetaP Meta {
      get { return meta_; }
      set {
        meta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeBaseP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeBaseP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hidden != other.Hidden) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Meta, other.Meta)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHidden) hash ^= Hidden.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (meta_ != null) hash ^= Meta.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasHidden) {
        output.WriteRawTag(8);
        output.WriteBool(Hidden);
      }
      if (HasId) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (meta_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Meta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHidden) {
        size += 1 + 1;
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeBaseP other) {
      if (other == null) {
        return;
      }
      if (other.HasHidden) {
        Hidden = other.Hidden;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.meta_ != null) {
        if (meta_ == null) {
          Meta = new global::Codecs.Proto.NodeMetaP();
        }
        Meta.MergeFrom(other.Meta);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Hidden = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (meta_ == null) {
              Meta = new global::Codecs.Proto.NodeMetaP();
            }
            input.ReadMessage(Meta);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeGroupP : pb::IMessage<NodeGroupP> {
    private static readonly pb::MessageParser<NodeGroupP> _parser = new pb::MessageParser<NodeGroupP>(() => new NodeGroupP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Codecs.Proto.CSharpSerializationBenchReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupP(NodeGroupP other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      children_ = other.children_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupP Clone() {
      return new NodeGroupP(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Codecs.Proto.NodeBaseP base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Codecs.Proto.NodeBaseP Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Codecs.Proto.NodeP> _repeated_children_codec
        = pb::FieldCodec.ForMessage(18, global::Codecs.Proto.NodeP.Parser);
    private readonly pbc::RepeatedField<global::Codecs.Proto.NodeP> children_ = new pbc::RepeatedField<global::Codecs.Proto.NodeP>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Codecs.Proto.NodeP> Children {
      get { return children_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if(!children_.Equals(other.children_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      hash ^= children_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupP other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Codecs.Proto.NodeBaseP();
        }
        Base.MergeFrom(other.Base);
      }
      children_.Add(other.children_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Codecs.Proto.NodeBaseP();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeP : pb::IMessage<NodeP> {
    private static readonly pb::MessageParser<NodeP> _parser = new pb::MessageParser<NodeP>(() => new NodeP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Codecs.Proto.CSharpSerializationBenchReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeP(NodeP other) : this() {
      switch (other.NodeCase) {
        case NodeOneofCase.Nvar:
          Nvar = other.Nvar.Clone();
          break;
        case NodeOneofCase.Ngroup:
          Ngroup = other.Ngroup.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeP Clone() {
      return new NodeP(this);
    }

    /// <summary>Field number for the "nvar" field.</summary>
    public const int NvarFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Codecs.Proto.NVarP Nvar {
      get { return nodeCase_ == NodeOneofCase.Nvar ? (global::Codecs.Proto.NVarP) node_ : null; }
      set {
        node_ = value;
        nodeCase_ = value == null ? NodeOneofCase.None : NodeOneofCase.Nvar;
      }
    }

    /// <summary>Field number for the "ngroup" field.</summary>
    public const int NgroupFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Codecs.Proto.NGroupP Ngroup {
      get { return nodeCase_ == NodeOneofCase.Ngroup ? (global::Codecs.Proto.NGroupP) node_ : null; }
      set {
        node_ = value;
        nodeCase_ = value == null ? NodeOneofCase.None : NodeOneofCase.Ngroup;
      }
    }

    private object node_;
    /// <summary>Enum of possible cases for the "node" oneof.</summary>
    public enum NodeOneofCase {
      None = 0,
      Nvar = 1,
      Ngroup = 2,
    }
    private NodeOneofCase nodeCase_ = NodeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeOneofCase NodeCase {
      get { return nodeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNode() {
      nodeCase_ = NodeOneofCase.None;
      node_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Nvar, other.Nvar)) return false;
      if (!object.Equals(Ngroup, other.Ngroup)) return false;
      if (NodeCase != other.NodeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nodeCase_ == NodeOneofCase.Nvar) hash ^= Nvar.GetHashCode();
      if (nodeCase_ == NodeOneofCase.Ngroup) hash ^= Ngroup.GetHashCode();
      hash ^= (int) nodeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nodeCase_ == NodeOneofCase.Nvar) {
        output.WriteRawTag(10);
        output.WriteMessage(Nvar);
      }
      if (nodeCase_ == NodeOneofCase.Ngroup) {
        output.WriteRawTag(18);
        output.WriteMessage(Ngroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nodeCase_ == NodeOneofCase.Nvar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nvar);
      }
      if (nodeCase_ == NodeOneofCase.Ngroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ngroup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeP other) {
      if (other == null) {
        return;
      }
      switch (other.NodeCase) {
        case NodeOneofCase.Nvar:
          if (Nvar == null) {
            Nvar = new global::Codecs.Proto.NVarP();
          }
          Nvar.MergeFrom(other.Nvar);
          break;
        case NodeOneofCase.Ngroup:
          if (Ngroup == null) {
            Ngroup = new global::Codecs.Proto.NGroupP();
          }
          Ngroup.MergeFrom(other.Ngroup);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Codecs.Proto.NVarP subBuilder = new global::Codecs.Proto.NVarP();
            if (nodeCase_ == NodeOneofCase.Nvar) {
              subBuilder.MergeFrom(Nvar);
            }
            input.ReadMessage(subBuilder);
            Nvar = subBuilder;
            break;
          }
          case 18: {
            global::Codecs.Proto.NGroupP subBuilder = new global::Codecs.Proto.NGroupP();
            if (nodeCase_ == NodeOneofCase.Ngroup) {
              subBuilder.MergeFrom(Ngroup);
            }
            input.ReadMessage(subBuilder);
            Ngroup = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class NVarP : pb::IMessage<NVarP> {
    private static readonly pb::MessageParser<NVarP> _parser = new pb::MessageParser<NVarP>(() => new NVarP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NVarP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Codecs.Proto.CSharpSerializationBenchReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NVarP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NVarP(NVarP other) : this() {
      _hasBits0 = other._hasBits0;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NVarP Clone() {
      return new NVarP(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private readonly static double ValueDefaultValue = 0D;

    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NVarP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NVarP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasValue) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasValue) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NVarP other) {
      if (other == null) {
        return;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NGroupP : pb::IMessage<NGroupP> {
    private static readonly pb::MessageParser<NGroupP> _parser = new pb::MessageParser<NGroupP>(() => new NGroupP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NGroupP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Codecs.Proto.CSharpSerializationBenchReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NGroupP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NGroupP(NGroupP other) : this() {
      group_ = other.group_ != null ? other.group_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NGroupP Clone() {
      return new NGroupP(this);
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 1;
    private global::Codecs.Proto.NodeGroupP group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Codecs.Proto.NodeGroupP Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NGroupP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NGroupP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Group, other.Group)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (group_ != null) hash ^= Group.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (group_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NGroupP other) {
      if (other == null) {
        return;
      }
      if (other.group_ != null) {
        if (group_ == null) {
          Group = new global::Codecs.Proto.NodeGroupP();
        }
        Group.MergeFrom(other.Group);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (group_ == null) {
              Group = new global::Codecs.Proto.NodeGroupP();
            }
            input.ReadMessage(Group);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
